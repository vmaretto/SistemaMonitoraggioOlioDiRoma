generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_PRISMA_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  organization  String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum UserRole {
  USER
  ANALYST
  INSPECTOR
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Keywords {
  id        String   @id @default(cuid())
  keyword   String   @unique
  category  String   @default("primary") // primary, secondary, competitor
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContenutiMonitorati {
  id            String   @id @default(cuid())
  fonte         String   // social, blog, ecommerce, news
  piattaforma   String   // facebook, twitter, amazon, google, etc
  testo         String   @db.Text
  url           String?
  imageUrl      String?  // URL dell'immagine rilevata nel contenuto
  autore        String?
  sentiment     String   // positivo, neutro, negativo
  sentimentScore Float   @default(0) // -1 a +1
  keywords      String[] // array delle keyword trovate
  dataPost      DateTime
  rilevanza     Int      @default(0) // 0-100
  isProcessed   Boolean  @default(true)
  metadata      Json?    // metadati aggiuntivi (image info, etc)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  verifiche     VerificheEtichette[] // Relazione con verifiche
}

model EtichetteUfficiali {
  id                String   @id @default(cuid())
  nome              String
  descrizione       String?
  
  // ✅ GESTIONE IMMAGINI (fronte/retro + retrocompatibilità)
  imageFronteUrl    String?  @db.Text  // Nuova: immagine fronte
  imageRetroUrl     String?  @db.Text  // Nuova: immagine retro
  imageUrl          String?  @db.Text  // Deprecata ma mantenuta per compatibilità
  cloudStoragePath  String?
  
  testoOcr          String?  @db.Text
  categoria         String   @default("ufficiale")
  denominazione     String
  produttore        String?
  
  // ✅ LOCATION DETTAGLIATA
  comune            String?              // Nuovo: comune di produzione
  regioneProduzione String   @default("Lazio")
  
  // ✅ TIPO ETICHETTA
  tipoEtichetta     String   @default("etichetta") // "etichetta" | "contenitore"
  
  isAttiva          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  verifiche         VerificheEtichette[]
}

model VerificheEtichette {
  id                  String             @id @default(cuid())
  imageUrl            String             @db.Text
  cloudStoragePath    String?
  testoOcr            String?            @db.Text
  risultatoMatching   String             // conforme, non_conforme, sospetta
  percentualeMatch    Float              @default(0) // 0-100
  etichettaRiferimento String?
  etichettaUfficiale  EtichetteUfficiali? @relation(fields: [etichettaRiferimento], references: [id])
  contenutoMonitoratoId String?          // Collegamento al contenuto che ha generato la verifica
  contenutoMonitorato ContenutiMonitorati? @relation(fields: [contenutoMonitoratoId], references: [id])
  violazioniRilevate  String[]           // array delle violazioni
  note                String?            @db.Text
  stato               String             @default("da_verificare") // da_verificare, verificata, archiviata
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model Alert {
  id          String   @id @default(cuid())
  tipo        String   // sentiment_negativo, etichetta_sospetta, picco_menzioni
  priorita    String   @default("medio") // basso, medio, critico
  titolo      String
  descrizione String   @db.Text
  fonte       String?  // id del contenuto o verifica che ha generato l'alert
  isRisolto   Boolean  @default(false)
  isNotificato Boolean @default(false)
  dataRisolto DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Configurazioni {
  id                    String   @id @default(cuid())
  chiave                String   @unique
  valore                String   @db.Text
  descrizione           String?
  categoria             String   @default("generale") // generale, monitoraggio, etichette, notifiche
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model LogNotifiche {
  id          String   @id @default(cuid())
  tipo        String   // email, sms, push
  destinatario String
  oggetto     String
  corpo       String   @db.Text
  stato       String   @default("inviata") // inviata, fallita, in_sospeso
  alertId     String?
  createdAt   DateTime @default(now())
}

// === SISTEMA TRACCIABILITÀ ISPETTORI ===

model Report {
  id              String        @id @default(cuid())
  title           String
  description     String        @db.Text
  createdAt       DateTime      @default(now())
  createdById     String
  status          ReportStatus  @default(ANALISI)
  inspections     Inspection[]
  clarifications  ClarificationRequest[]
  authorityNotices AuthorityNotice[]
  actions         ActionLog[]
  attachments     Attachment[]
  updatedAt       DateTime      @updatedAt
}

enum ReportStatus {
  ANALISI
  ARCHIVIATA
  IN_CONTROLLO
  VERIFICA_SOPRALLUOGO
  VERIFICA_CHIARIMENTI
  SEGNALATA_A_ENTE
  IN_ATTESA_FEEDBACK_ENTE
  CHIUSA
}

model ActionLog {
  id          String   @id @default(cuid())
  reportId    String
  type        String   // es.: ANALISI_AVVIATA, ARCHIVIAZIONE, AVVIO_CONTROLLO, INVIO_A_ENTE, SOPRALLUOGO_VERBALE, RICHIESTA_CHIARIMENTI, FEEDBACK_ENTE, CHIUSURA
  message     String   @db.Text
  meta        Json?
  createdAt   DateTime @default(now())
  actorId     String
  report      Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model Inspection {
  id          String   @id @default(cuid())
  reportId    String
  date        DateTime
  inspectorId String
  location    String?
  minutesText String?  @db.Text // verbale
  outcome     String?  // esito breve
  createdAt   DateTime @default(now())
  report      Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  updatedAt   DateTime @updatedAt
}

model ClarificationRequest {
  id          String   @id @default(cuid())
  reportId    String
  requestedAt DateTime @default(now())
  requestedBy String
  question    String   @db.Text
  dueAt       DateTime?
  feedbackAt  DateTime?
  feedback    String?  @db.Text
  outcome     String?  // CHIUSA o SEGNALATA_A_ENTE
  report      Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  updatedAt   DateTime @updatedAt
}

model AuthorityNotice {
  id           String   @id @default(cuid())
  reportId     String
  sentAt       DateTime @default(now())
  sentBy       String
  authority    String
  protocol     String?
  feedbackAt   DateTime?
  feedback     String?  @db.Text
  report       Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  updatedAt    DateTime @updatedAt
}

model Attachment {
  id         String   @id @default(cuid())
  reportId   String
  entityType String   // REPORT | INSPECTION | CLARIFICATION | AUTHORITY_NOTICE
  entityId   String
  filename   String
  url        String
  uploadedBy String
  uploadedAt DateTime @default(now())
  report     Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  
  // Le relazioni vengono gestite a livello applicativo tramite entityType ed entityId
  @@index([entityType, entityId])
}
